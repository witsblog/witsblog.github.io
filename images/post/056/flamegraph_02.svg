<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>v2`Market::handleAddFor(dtbt::MboMsg const&amp;, std::__1::unordered_map&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;, std::__1::hash&lt;unsigned short&gt;, std::__1::equal_to&lt;unsigned short&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned short const, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;&gt;&gt;&amp;, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair (22 samples, 0.14%)</title><rect x="1180.6" y="197" width="1.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1183.57" y="207.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="133" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="143.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (4 samples, 0.02%)</title><rect x="1173.6" y="165" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1176.63" y="175.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::xsgetn (581 samples, 3.60%)</title><rect x="31.0" y="149" width="42.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="34.05" y="159.5" >lib..</text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.16%)</title><rect x="795.2" y="149" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="798.23" y="159.5" ></text>
</g>
<g >
<title>v2`Book::GetOrInsertLevel (25 samples, 0.15%)</title><rect x="1047.4" y="165" width="1.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1050.42" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.03%)</title><rect x="506.7" y="117" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="509.72" y="127.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::uflow (579 samples, 3.59%)</title><rect x="31.2" y="133" width="42.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="34.19" y="143.5" >lib..</text>
</g>
<g >
<title>libsystem_c.dylib`funlockfile (3 samples, 0.02%)</title><rect x="70.1" y="85" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="73.14" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (22 samples, 0.14%)</title><rect x="467.0" y="85" width="1.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="470.03" y="95.5" ></text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (74 samples, 0.46%)</title><rect x="415.7" y="149" width="5.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="418.66" y="159.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.02%)</title><rect x="69.9" y="69" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="72.92" y="79.5" ></text>
</g>
<g >
<title>v2`Market::Apply (53 samples, 0.33%)</title><rect x="16.6" y="213" width="3.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="19.58" y="223.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$malloc_type_malloc (2 samples, 0.01%)</title><rect x="465.9" y="133" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="468.94" y="143.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__srefill1 (514 samples, 3.18%)</title><rect x="32.4" y="69" width="37.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="35.36" y="79.5" >lib..</text>
</g>
<g >
<title>v2`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;unsigned short, std::__1::__hash_value_type&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;, std::__1::hash&lt;unsigned short&gt;, std::__1::equal_to&lt;unsigned short&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned short, std::__1::__hash_value_type&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;, std::__1::equal_to&lt;unsigned short&gt;, std::__1::hash&lt;unsigned short&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;&gt;&gt;::remove(std::__1::__hash_const_iterator&lt;std::__1::__hash_node (340 samples, 2.11%)</title><rect x="985.5" y="149" width="24.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="988.45" y="159.5" >l..</text>
</g>
<g >
<title>v2`main (16,144 samples, 99.98%)</title><rect x="10.1" y="261" width="1179.8" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="13.07" y="271.5" >v2`main</text>
</g>
<g >
<title>v2`Market::handleAddFor(dtbt::MboMsg const&amp;, std::__1::unordered_map&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;, std::__1::hash&lt;unsigned short&gt;, std::__1::equal_to&lt;unsigned short&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned short const, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;&gt;&gt;&amp;, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair (796 samples, 4.93%)</title><rect x="1057.9" y="181" width="58.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1060.95" y="191.5" >v2..</text>
</g>
<g >
<title>dyld`start (16,145 samples, 99.99%)</title><rect x="10.0" y="277" width="1179.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >dyld`start</text>
</g>
<g >
<title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="110.5" y="133" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="113.48" y="143.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="165" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="175.5" ></text>
</g>
<g >
<title>v2`void std::__1::__tree_balance_after_insert[abi:ne180100]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (10 samples, 0.06%)</title><rect x="784.4" y="149" width="0.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="787.41" y="159.5" ></text>
</g>
<g >
<title>v2`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::hash&lt;unsigned int&gt;, std::__1::equal_to&lt;unsigned int&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::equal_to&lt;unsigned int&gt;, std::__1::hash&lt;unsigned int&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator (44 samples, 0.27%)</title><rect x="1184.7" y="197" width="3.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1187.74" y="207.5" ></text>
</g>
<g >
<title>v2`std::__1::__function::__func&lt;run_replay()::$_1, std::__1::allocator&lt;run_replay()::$_1&gt;, dtbt::KeepGoing (dtbt::Record const&amp;)&gt;::operator() (15,111 samples, 93.58%)</title><rect x="83.7" y="213" width="1104.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="86.66" y="223.5" >v2`std::__1::__function::__func&lt;run_replay()::$_1, std::__1::allocator&lt;run_replay()::$_1&gt;, dtbt::KeepGoing (dtbt::Record const&amp;)&gt;::operator()</text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (35 samples, 0.22%)</title><rect x="466.1" y="133" width="2.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="469.08" y="143.5" ></text>
</g>
<g >
<title>v2`Market::~Market (2 samples, 0.01%)</title><rect x="10.1" y="229" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.15" y="239.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (179 samples, 1.11%)</title><rect x="1016.5" y="133" width="13.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1019.51" y="143.5" ></text>
</g>
<g >
<title>v2`Book::Apply (22 samples, 0.14%)</title><rect x="88.0" y="197" width="1.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="90.97" y="207.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.02%)</title><rect x="110.5" y="149" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="113.48" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (48 samples, 0.30%)</title><rect x="73.6" y="149" width="3.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="76.58" y="159.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$malloc_type_malloc (5 samples, 0.03%)</title><rect x="505.3" y="133" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="508.33" y="143.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`flockfile (3 samples, 0.02%)</title><rect x="69.9" y="85" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="72.92" y="95.5" ></text>
</g>
<g >
<title>v2`std::__1::__function::__func&lt;run_replay()::$_1, std::__1::allocator&lt;run_replay()::$_1&gt;, dtbt::KeepGoing (dtbt::Record const&amp;)&gt;::operator() (25 samples, 0.15%)</title><rect x="1188.0" y="229" width="1.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.03" y="239.5" ></text>
</g>
<g >
<title>v2`Market::handleAdd (4 samples, 0.02%)</title><rect x="1180.3" y="197" width="0.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1183.28" y="207.5" ></text>
</g>
<g >
<title>v2`dtbt::DbnDecoder::DecodeRecord (35 samples, 0.22%)</title><rect x="10.3" y="229" width="2.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="13.29" y="239.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (3,636 samples, 22.52%)</title><rect x="516.4" y="101" width="265.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="519.36" y="111.5" >libsystem_malloc.dylib`nanov2_alloc..</text>
</g>
<g >
<title>v2`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__do_rehash&lt;true&gt; (5 samples, 0.03%)</title><rect x="784.0" y="133" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="787.05" y="143.5" ></text>
</g>
<g >
<title>all (16,147 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.08%)</title><rect x="420.1" y="133" width="1.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="423.12" y="143.5" ></text>
</g>
<g >
<title>v2`Market::handleCancel (6 samples, 0.04%)</title><rect x="1182.2" y="197" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.18" y="207.5" ></text>
</g>
<g >
<title>v2`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__emplace_unique_key_args&lt;unsigned long long, unsigned long long&amp;, Book::PriceAndSide&gt; (23 samples, 0.14%)</title><rect x="1050.3" y="165" width="1.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1053.27" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="1039.3" y="133" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1042.31" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.03%)</title><rect x="782.1" y="101" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="785.08" y="111.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_unlock_init_slow (2 samples, 0.01%)</title><rect x="70.2" y="69" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="73.22" y="79.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (18 samples, 0.11%)</title><rect x="1042.5" y="133" width="1.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1045.53" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (104 samples, 0.64%)</title><rect x="1108.4" y="117" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1111.44" y="127.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="85" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.05%)</title><rect x="420.5" y="117" width="0.6" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="423.48" y="127.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="1042.4" y="133" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1045.38" y="143.5" ></text>
</g>
<g >
<title>v2`run_replay() (16,144 samples, 99.98%)</title><rect x="10.1" y="245" width="1179.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.07" y="255.5" >v2`run_replay()</text>
</g>
<g >
<title>libsystem_c.dylib`__srefill0 (4 samples, 0.02%)</title><rect x="32.1" y="69" width="0.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="35.07" y="79.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (6 samples, 0.04%)</title><rect x="423.1" y="149" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="426.11" y="159.5" ></text>
</g>
<g >
<title>v2`Book::Cancel (3,556 samples, 22.02%)</title><rect x="785.1" y="165" width="259.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="788.14" y="175.5" >v2`Book::Cancel</text>
</g>
<g >
<title>v2`Book::Apply (13,068 samples, 80.93%)</title><rect x="97.0" y="181" width="955.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="100.04" y="191.5" >v2`Book::Apply</text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::underflow (578 samples, 3.58%)</title><rect x="31.2" y="117" width="42.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="34.19" y="127.5" >lib..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.17%)</title><rect x="780.0" y="69" width="2.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="783.03" y="79.5" ></text>
</g>
<g >
<title>v2`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::hash&lt;unsigned int&gt;, std::__1::equal_to&lt;unsigned int&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::equal_to&lt;unsigned int&gt;, std::__1::hash&lt;unsigned int&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator (82 samples, 0.51%)</title><rect x="1173.9" y="181" width="6.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1176.92" y="191.5" ></text>
</g>
<g >
<title>v2`void std::__1::__tree_remove[abi:ne180100]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (4 samples, 0.02%)</title><rect x="1180.0" y="181" width="0.3" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1182.99" y="191.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`fread (574 samples, 3.55%)</title><rect x="31.5" y="101" width="41.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="34.49" y="111.5" >lib..</text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="149" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="159.5" ></text>
</g>
<g >
<title>v2`unsigned long std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::__erase_unique&lt;long long&gt; (122 samples, 0.76%)</title><rect x="1034.9" y="149" width="8.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1037.93" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (4,103 samples, 25.41%)</title><rect x="110.7" y="165" width="299.8" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="113.70" y="175.5" >libsystem_platform.dylib`_platform_memmove</text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="1173.4" y="165" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1176.41" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.19%)</title><rect x="1039.5" y="133" width="2.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1042.53" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (3,768 samples, 23.34%)</title><rect x="507.1" y="117" width="275.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="510.08" y="127.5" >libsystem_malloc.dylib`nanov2_malloc..</text>
</g>
<g >
<title>libsystem_c.dylib`DYLD-STUB$$mkdtempat_np (2 samples, 0.01%)</title><rect x="31.6" y="85" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="34.63" y="95.5" ></text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (3,787 samples, 23.45%)</title><rect x="505.7" y="133" width="276.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="508.69" y="143.5" >libc++abi.dylib`operator new(unsigned..</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_once (2 samples, 0.01%)</title><rect x="32.2" y="53" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="35.22" y="63.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="1189.9" y="277" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1192.85" y="287.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.01%)</title><rect x="1029.6" y="133" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1032.59" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (53 samples, 0.33%)</title><rect x="416.2" y="133" width="3.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="419.24" y="143.5" ></text>
</g>
<g >
<title>v2`Book::Add (10 samples, 0.06%)</title><rect x="96.3" y="181" width="0.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="99.31" y="191.5" ></text>
</g>
<g >
<title>v2`unsigned long std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__erase_unique&lt;unsigned long long&gt; (337 samples, 2.09%)</title><rect x="1010.3" y="149" width="24.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1013.30" y="159.5" >l..</text>
</g>
<g >
<title>libsystem_kernel.dylib`__read_nocancel (512 samples, 3.17%)</title><rect x="32.5" y="37" width="37.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="35.51" y="47.5" >lib..</text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="69" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="79.5" ></text>
</g>
<g >
<title>v2`dtbt::DbnDecoder::DecodeRecordCompat(unsigned char, dtbt::VersionUpgradePolicy, bool, std::__1::array (83 samples, 0.51%)</title><rect x="24.8" y="197" width="6.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="27.76" y="207.5" ></text>
</g>
<g >
<title>v2`Market::handleCancelFor(dtbt::MboMsg const&amp;, std::__1::unordered_map&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;, std::__1::hash&lt;unsigned short&gt;, std::__1::equal_to&lt;unsigned short&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned short const, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;&gt;&gt;&amp;, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair (29 samples, 0.18%)</title><rect x="1182.6" y="197" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.62" y="207.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3,594 samples, 22.26%)</title><rect x="519.4" y="85" width="262.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="522.43" y="95.5" >libsystem_malloc.dylib`nanov2_find_..</text>
</g>
<g >
<title>v2`void std::__1::__tree_remove[abi:ne180100]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (16 samples, 0.10%)</title><rect x="1043.8" y="149" width="1.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1046.84" y="159.5" ></text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (107 samples, 0.66%)</title><rect x="1108.2" y="165" width="7.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1111.23" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="1042.1" y="101" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1045.09" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.02%)</title><rect x="420.8" y="101" width="0.3" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="423.77" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (2 samples, 0.01%)</title><rect x="468.6" y="133" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="471.64" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.04%)</title><rect x="95.8" y="181" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="98.79" y="191.5" ></text>
</g>
<g >
<title>v2`std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;::__destroy_vector::operator()[abi:ne180100] (2 samples, 0.01%)</title><rect x="10.1" y="213" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.15" y="223.5" ></text>
</g>
<g >
<title>v2`DYLD-STUB$$operator delete(void*) (8 samples, 0.05%)</title><rect x="984.9" y="149" width="0.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="987.87" y="159.5" ></text>
</g>
<g >
<title>v2`Market::handleAdd (51 samples, 0.32%)</title><rect x="1054.2" y="181" width="3.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1057.22" y="191.5" ></text>
</g>
<g >
<title>v2`dtbt::DbnDecoder::DecodeRecordCompat(unsigned char, dtbt::VersionUpgradePolicy, bool, std::__1::array (42 samples, 0.26%)</title><rect x="77.1" y="213" width="3.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="80.09" y="223.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (2 samples, 0.01%)</title><rect x="422.7" y="149" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="425.75" y="159.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="109.6" y="165" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="112.61" y="175.5" ></text>
</g>
<g >
<title>v2`Book::GetLevelOrder(std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (1,749 samples, 10.83%)</title><rect x="857.1" y="149" width="127.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="860.05" y="159.5" >v2`Book::Get..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (32 samples, 0.20%)</title><rect x="466.3" y="117" width="2.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="469.30" y="127.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.25%)</title><rect x="70.4" y="85" width="3.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="73.44" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (104 samples, 0.64%)</title><rect x="1108.4" y="133" width="7.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1111.44" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.02%)</title><rect x="110.5" y="165" width="0.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="113.48" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.02%)</title><rect x="420.6" y="101" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="423.56" y="111.5" ></text>
</g>
<g >
<title>v2`Book::Add (5,126 samples, 31.75%)</title><rect x="410.5" y="165" width="374.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="413.54" y="175.5" >v2`Book::Add</text>
</g>
<g >
<title>v2`Book::GetLevelOrder(std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (7 samples, 0.04%)</title><rect x="1046.9" y="165" width="0.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1049.91" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="1042.1" y="117" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1045.09" y="127.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (2 samples, 0.01%)</title><rect x="1050.1" y="37" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.13" y="47.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_free (37 samples, 0.23%)</title><rect x="792.5" y="149" width="2.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="795.53" y="159.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt;&gt;::read (630 samples, 3.90%)</title><rect x="31.0" y="165" width="46.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="34.05" y="175.5" >libc..</text>
</g>
<g >
<title>v2`dtbt::DbnDecoder::DecodeRecord (775 samples, 4.80%)</title><rect x="20.5" y="213" width="56.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="23.45" y="223.5" >lob_v..</text>
</g>
<g >
<title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="422.9" y="149" width="0.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="425.89" y="159.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$free (10 samples, 0.06%)</title><rect x="791.8" y="149" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="794.79" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_free (2 samples, 0.01%)</title><rect x="109.9" y="165" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="112.90" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (24 samples, 0.15%)</title><rect x="466.9" y="101" width="1.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="469.89" y="111.5" ></text>
</g>
<g >
<title>v2`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__emplace_unique_key_args&lt;unsigned long long, unsigned long long&amp;, Book::PriceAndSide&gt; (4,305 samples, 26.66%)</title><rect x="469.8" y="149" width="314.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="472.81" y="159.5" >v2`std::__1::pair&lt;std::__1::__hash_ite..</text>
</g>
<g >
<title>v2`DYLD-STUB$$operator new(unsigned long) (14 samples, 0.09%)</title><rect x="468.8" y="149" width="1.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="471.79" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_free (2 samples, 0.01%)</title><rect x="95.6" y="181" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="98.65" y="191.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (8 samples, 0.05%)</title><rect x="1015.9" y="133" width="0.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1018.93" y="143.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="111.5" ></text>
</g>
<g >
<title>v2`Book::GetLevel (26 samples, 0.16%)</title><rect x="1045.0" y="165" width="1.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1048.01" y="175.5" ></text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.01%)</title><rect x="109.8" y="165" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="112.75" y="175.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__fread (521 samples, 3.23%)</title><rect x="31.9" y="85" width="38.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="34.85" y="95.5" >lib..</text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (22 samples, 0.14%)</title><rect x="782.4" y="133" width="1.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="785.44" y="143.5" ></text>
</g>
<g >
<title>v2`DYLD-STUB$$operator new(unsigned long) (2 samples, 0.01%)</title><rect x="1049.9" y="165" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1052.91" y="175.5" ></text>
</g>
<g >
<title>v2`dtbt::Record::Size (28 samples, 0.17%)</title><rect x="80.2" y="213" width="2.0" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="83.16" y="223.5" ></text>
</g>
<g >
<title>v2`DYLD-STUB$$std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt;&gt;::read (2 samples, 0.01%)</title><rect x="30.9" y="181" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="33.90" y="191.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (107 samples, 0.66%)</title><rect x="1108.2" y="149" width="7.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1111.23" y="159.5" ></text>
</g>
<g >
<title>v2`dtbt::DbnDecoder::FillBuffer (633 samples, 3.92%)</title><rect x="30.8" y="197" width="46.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="33.83" y="207.5" >lob_..</text>
</g>
<g >
<title>v2`Market::handleCancel (34 samples, 0.21%)</title><rect x="1116.1" y="181" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1119.12" y="191.5" ></text>
</g>
<g >
<title>v2`Book::Cancel (30 samples, 0.19%)</title><rect x="1052.0" y="181" width="2.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1055.03" y="191.5" ></text>
</g>
<g >
<title>v2`dtbt::RecordHeader::Size (20 samples, 0.12%)</title><rect x="82.2" y="213" width="1.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="85.20" y="223.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`free_tiny (7 samples, 0.04%)</title><rect x="1041.9" y="133" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1044.87" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (29 samples, 0.18%)</title><rect x="417.9" y="117" width="2.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="420.92" y="127.5" ></text>
</g>
<g >
<title>v2`Market::Apply (14,925 samples, 92.43%)</title><rect x="89.6" y="197" width="1090.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="92.58" y="207.5" >v2`Market::Apply</text>
</g>
<g >
<title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="422.5" y="149" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="425.46" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.18%)</title><rect x="417.9" y="101" width="2.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="420.92" y="111.5" ></text>
</g>
<g >
<title>v2`dtbt::DbnFileStore::Replay(std::__1::function&lt;void (dtbt::Metadata&amp;&amp;)&gt; const&amp;, std::__1::function&lt;dtbt::KeepGoing  (16,080 samples, 99.59%)</title><rect x="12.9" y="229" width="1175.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="15.85" y="239.5" >v2`dtbt::DbnFileStore::Replay(std::__1::function&lt;void (dtbt::Metadata&amp;&amp;)&gt; const&amp;, std::__1::function&lt;dtbt::KeepGoing </text>
</g>
<g >
<title>libsystem_c.dylib`_sread (513 samples, 3.18%)</title><rect x="32.4" y="53" width="37.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="35.44" y="63.5" >lib..</text>
</g>
<g >
<title>libsystem_c.dylib`DYLD-STUB$$__error (2 samples, 0.01%)</title><rect x="31.5" y="85" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="34.49" y="95.5" ></text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="127.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`__bzero (10 samples, 0.06%)</title><rect x="1029.7" y="133" width="0.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1032.74" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.11%)</title><rect x="421.1" y="149" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="424.07" y="159.5" ></text>
</g>
<g >
<title>v2`Book::GetLevel (819 samples, 5.07%)</title><rect x="797.2" y="149" width="59.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="800.20" y="159.5" >v2..</text>
</g>
<g >
<title>v2`Market::handleCancelFor(dtbt::MboMsg const&amp;, std::__1::unordered_map&lt;unsigned short, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;, std::__1::hash&lt;unsigned short&gt;, std::__1::equal_to&lt;unsigned short&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned short const, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair&lt;long long const, Level&gt;&gt;&gt;&gt;&gt;&gt;&amp;, std::__1::map&lt;long long, Level, std::__1::less&lt;long long&gt;, std::__1::allocator&lt;std::__1::pair (757 samples, 4.69%)</title><rect x="1118.6" y="181" width="55.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1121.60" y="191.5" >lob_v..</text>
</g>
<g >
<title>v2`dtbt::InFileStream::ReadSome (630 samples, 3.90%)</title><rect x="31.0" y="181" width="46.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="34.05" y="191.5" >lob_..</text>
</g>
<g >
<title>v2`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (3 samples, 0.02%)</title><rect x="1050.1" y="53" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1053.05" y="63.5" ></text>
</g>
<g >
<title>v2`Book::GetOrInsertLevel (619 samples, 3.83%)</title><rect x="423.6" y="149" width="45.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="426.55" y="159.5" >lob_..</text>
</g>
<g >
<title>v2`DYLD-STUB$$memmove (9 samples, 0.06%)</title><rect x="1049.3" y="165" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1052.25" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.07%)</title><rect x="518.6" y="85" width="0.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="521.63" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.04%)</title><rect x="110.0" y="165" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="113.04" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="422.3" y="149" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="425.31" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (61 samples, 0.38%)</title><rect x="1030.5" y="133" width="4.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1033.47" y="143.5" ></text>
</g>
</g>
</svg>
