<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>baseline`Book::GetLevel (104 samples, 0.29%)</title><rect x="1149.0" y="165" width="3.4" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="1152.02" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.14%)</title><rect x="279.4" y="133" width="1.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="282.36" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (845 samples, 2.33%)</title><rect x="373.0" y="101" width="27.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="376.01" y="111.5" >l..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (1,657 samples, 4.57%)</title><rect x="225.4" y="133" width="54.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="228.38" y="143.5" >libsy..</text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.02%)</title><rect x="144.0" y="165" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="146.98" y="175.5" ></text>
</g>
<g >
<title>baseline`DYLD-STUB$$operator new(unsigned long) (7 samples, 0.02%)</title><rect x="1157.1" y="165" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1160.10" y="175.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (139 samples, 0.38%)</title><rect x="96.6" y="85" width="4.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="99.65" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (102 samples, 0.28%)</title><rect x="790.9" y="69" width="3.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="793.93" y="79.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$malloc_type_malloc (12 samples, 0.03%)</title><rect x="223.2" y="149" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="226.20" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.02%)</title><rect x="373.7" y="85" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="376.66" y="95.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`__bzero (16 samples, 0.04%)</title><rect x="1140.4" y="133" width="0.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1143.36" y="143.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::xsgetn (2,245 samples, 6.20%)</title><rect x="28.5" y="149" width="73.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="31.47" y="159.5" >libc++.1..</text>
</g>
<g >
<title>libsystem_c.dylib`fread (2,213 samples, 6.11%)</title><rect x="29.3" y="101" width="72.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="32.28" y="111.5" >libsyste..</text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (23 samples, 0.06%)</title><rect x="283.2" y="149" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="286.23" y="159.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`flockfile (6 samples, 0.02%)</title><rect x="96.0" y="85" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="99.00" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.01%)</title><rect x="797.6" y="133" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="800.58" y="143.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__srefill1 (2,010 samples, 5.55%)</title><rect x="30.4" y="69" width="65.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="33.42" y="79.5" >libsyst..</text>
</g>
<g >
<title>baseline`unsigned long std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::__erase_unique&lt;long long&gt; (5 samples, 0.01%)</title><rect x="1160.7" y="165" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1163.65" y="175.5" ></text>
</g>
<g >
<title>baseline`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__emplace_unique_key_args&lt;unsigned long long, unsigned long long&amp;, Book::PriceAndSide&gt; (12,123 samples, 33.47%)</title><rect x="403.2" y="149" width="394.9" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="406.24" y="159.5" >baseline`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (818 samples, 2.26%)</title><rect x="373.9" y="85" width="26.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="376.89" y="95.5" >l..</text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (71 samples, 0.20%)</title><rect x="795.3" y="133" width="2.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="798.27" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`free_tiny (22 samples, 0.06%)</title><rect x="1139.6" y="133" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1142.58" y="143.5" ></text>
</g>
<g >
<title>baseline`Book::Cancel (10,657 samples, 29.42%)</title><rect x="801.9" y="165" width="347.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="804.88" y="175.5" >baseline`Book::Cancel</text>
</g>
<g >
<title>baseline`unsigned long std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__erase_unique&lt;unsigned long long&gt; (1,099 samples, 3.03%)</title><rect x="1070.5" y="149" width="35.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1073.49" y="159.5" >lob..</text>
</g>
<g >
<title>baseline`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__do_rehash&lt;true&gt; (12 samples, 0.03%)</title><rect x="797.7" y="133" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="800.74" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.05%)</title><rect x="1139.7" y="117" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1142.74" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`free_tiny (6 samples, 0.02%)</title><rect x="283.0" y="149" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="286.04" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (11 samples, 0.03%)</title><rect x="225.0" y="133" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="228.02" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_type_malloc (22 samples, 0.06%)</title><rect x="400.7" y="133" width="0.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="403.73" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_free (5 samples, 0.01%)</title><rect x="143.8" y="165" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="146.81" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (9,370 samples, 25.87%)</title><rect x="489.0" y="101" width="305.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="492.04" y="111.5" >libsystem_malloc.dylib`nanov2_allocate_ou..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (14 samples, 0.04%)</title><rect x="368.4" y="117" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="371.45" y="127.5" ></text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (4 samples, 0.01%)</title><rect x="1157.4" y="69" width="0.1" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.36" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (14 samples, 0.04%)</title><rect x="1079.0" y="133" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1081.95" y="143.5" ></text>
</g>
<g >
<title>baseline`Book::GetLevel (3,537 samples, 9.76%)</title><rect x="825.0" y="149" width="115.2" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="827.97" y="159.5" >baseline`Book::G..</text>
</g>
<g >
<title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.01%)</title><rect x="281.0" y="149" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="283.95" y="159.5" ></text>
</g>
<g >
<title>baseline`DYLD-STUB$$operator delete(void*) (4 samples, 0.01%)</title><rect x="1157.0" y="165" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1159.97" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.04%)</title><rect x="280.5" y="101" width="0.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="283.46" y="111.5" ></text>
</g>
<g >
<title>baseline`dtbt::DbnDecoder::DecodeRecord (53 samples, 0.15%)</title><rect x="10.1" y="229" width="1.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.07" y="239.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (42 samples, 0.12%)</title><rect x="472.9" y="117" width="1.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="475.94" y="127.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (163 samples, 0.45%)</title><rect x="101.7" y="149" width="5.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="104.66" y="159.5" ></text>
</g>
<g >
<title>baseline`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::hash&lt;unsigned int&gt;, std::__1::equal_to&lt;unsigned int&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::equal_to&lt;unsigned int&gt;, std::__1::hash&lt;unsigned int&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator (180 samples, 0.50%)</title><rect x="1184.0" y="197" width="5.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1187.01" y="207.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (7 samples, 0.02%)</title><rect x="96.2" y="69" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="99.19" y="79.5" ></text>
</g>
<g >
<title>baseline`void std::__1::__tree_balance_after_insert[abi:ne180100]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (115 samples, 0.32%)</title><rect x="798.1" y="149" width="3.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="801.13" y="159.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`_sread (2,010 samples, 5.55%)</title><rect x="30.4" y="53" width="65.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="33.42" y="63.5" >libsyst..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.02%)</title><rect x="400.5" y="101" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="403.53" y="111.5" ></text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (5 samples, 0.01%)</title><rect x="1157.3" y="133" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.33" y="143.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="101.5" y="117" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="104.47" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (31 samples, 0.09%)</title><rect x="794.3" y="101" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="797.26" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (626 samples, 1.73%)</title><rect x="1079.4" y="133" width="20.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1082.41" y="143.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (2,150 samples, 5.94%)</title><rect x="144.3" y="165" width="70.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="147.34" y="175.5" >libsyst..</text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (5 samples, 0.01%)</title><rect x="1157.3" y="149" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.33" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`__bzero (13 samples, 0.04%)</title><rect x="1099.9" y="133" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1102.87" y="143.5" ></text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (5 samples, 0.01%)</title><rect x="1157.3" y="117" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.33" y="127.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`__read_nocancel (2,005 samples, 5.53%)</title><rect x="30.6" y="37" width="65.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="33.59" y="47.5" >libsyst..</text>
</g>
<g >
<title>baseline`Book::GetLevelOrder(std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (23 samples, 0.06%)</title><rect x="1152.4" y="165" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1155.41" y="175.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::uflow (2,231 samples, 6.16%)</title><rect x="28.9" y="133" width="72.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="31.93" y="143.5" >libc++.1..</text>
</g>
<g >
<title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (9 samples, 0.02%)</title><rect x="1129.9" y="133" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1132.90" y="143.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (184 samples, 0.51%)</title><rect x="1100.3" y="133" width="6.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1103.29" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.02%)</title><rect x="1140.1" y="101" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1143.10" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.02%)</title><rect x="231.0" y="101" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="233.95" y="111.5" ></text>
</g>
<g >
<title>baseline`Market::Apply (57 samples, 0.16%)</title><rect x="13.7" y="213" width="1.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="16.68" y="223.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`DYLD-STUB$$__error (4 samples, 0.01%)</title><rect x="29.3" y="85" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="32.32" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.02%)</title><rect x="279.6" y="117" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="282.62" y="127.5" ></text>
</g>
<g >
<title>baseline`dtbt::DbnFileStore::Replay(std::__1::function&lt;void (dtbt::Metadata&amp;&amp;)&gt; const&amp;, std::__1::function&lt;dtbt::KeepGoing  (36,166 samples, 99.84%)</title><rect x="11.8" y="229" width="1178.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="14.79" y="239.5" >baseline`dtbt::DbnFileStore::Replay(std::__1::function&lt;void (dtbt::Metadata&amp;&amp;)&gt; const&amp;, std::__1::function&lt;dtbt::KeepGoing </text>
</g>
<g >
<title>baseline`DYLD-STUB$$memmove (21 samples, 0.06%)</title><rect x="1156.3" y="165" width="0.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1159.29" y="175.5" ></text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (4 samples, 0.01%)</title><rect x="1157.4" y="85" width="0.1" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.36" y="95.5" ></text>
</g>
<g >
<title>baseline`Book::GetOrInsertLevel (96 samples, 0.27%)</title><rect x="1153.2" y="165" width="3.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1156.16" y="175.5" ></text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (5 samples, 0.01%)</title><rect x="1157.3" y="101" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.33" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.08%)</title><rect x="280.0" y="117" width="1.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="283.01" y="127.5" ></text>
</g>
<g >
<title>baseline`main (36,222 samples, 99.99%)</title><rect x="10.0" y="245" width="1179.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.03" y="255.5" >baseline`main</text>
</g>
<g >
<title>baseline`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::__emplace_unique_key_args&lt;unsigned long long, unsigned long long&amp;, Book::PriceAndSide&gt; (97 samples, 0.27%)</title><rect x="1157.5" y="165" width="3.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1160.49" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (285 samples, 0.79%)</title><rect x="1130.2" y="133" width="9.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1133.19" y="143.5" ></text>
</g>
<g >
<title>baseline`Book::GetLevelOrder(std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (2,669 samples, 7.37%)</title><rect x="940.2" y="149" width="86.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="943.19" y="159.5" >baseline`Boo..</text>
</g>
<g >
<title>baseline`dtbt::DbnDecoder::FillBuffer (2,425 samples, 6.69%)</title><rect x="28.1" y="197" width="79.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="31.08" y="207.5" >baseline`da..</text>
</g>
<g >
<title>baseline`dtbt::RecordHeader::Size (56 samples, 0.15%)</title><rect x="113.3" y="213" width="1.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="116.29" y="223.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (36 samples, 0.10%)</title><rect x="278.2" y="85" width="1.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="281.18" y="95.5" ></text>
</g>
<g >
<title>baseline`Book::Cancel (67 samples, 0.18%)</title><rect x="1160.8" y="181" width="2.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1163.81" y="191.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`funlockfile (12 samples, 0.03%)</title><rect x="96.2" y="85" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="99.19" y="95.5" ></text>
</g>
<g >
<title>all (36,225 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>dyld`start (36,223 samples, 99.99%)</title><rect x="10.0" y="261" width="1179.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >dyld`start</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (977 samples, 2.70%)</title><rect x="368.9" y="117" width="31.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="371.90" y="127.5" >li..</text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (9,932 samples, 27.42%)</title><rect x="471.7" y="133" width="323.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="474.74" y="143.5" >libc++abi.dylib`operator new(unsigned long)</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.07%)</title><rect x="492.6" y="85" width="0.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="495.62" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_free (188 samples, 0.52%)</title><rect x="815.5" y="149" width="6.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="818.53" y="159.5" ></text>
</g>
<g >
<title>baseline`dtbt::Record::Size (96 samples, 0.27%)</title><rect x="110.2" y="213" width="3.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="113.17" y="223.5" ></text>
</g>
<g >
<title>baseline`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::hash&lt;unsigned int&gt;, std::__1::equal_to&lt;unsigned int&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned int, std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator&lt;Market::PublisherBook&gt;&gt;&gt;, std::__1::equal_to&lt;unsigned int&gt;, std::__1::hash&lt;unsigned int&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned int, std::__1::vector&lt;Market::PublisherBook, std::__1::allocator (644 samples, 1.78%)</title><rect x="1163.0" y="181" width="21.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1166.03" y="191.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt;&gt;::read (2,412 samples, 6.66%)</title><rect x="28.4" y="165" width="78.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="31.40" y="175.5" >libc++.1...</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (26 samples, 0.07%)</title><rect x="284.2" y="149" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="287.18" y="159.5" ></text>
</g>
<g >
<title>libc++.1.dylib`std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::underflow (2,223 samples, 6.14%)</title><rect x="29.0" y="117" width="72.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="31.99" y="127.5" >libc++.1..</text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (58 samples, 0.16%)</title><rect x="281.1" y="149" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="284.08" y="159.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__fread (2,036 samples, 5.62%)</title><rect x="29.6" y="85" width="66.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="32.61" y="95.5" >libsyst..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (4 samples, 0.01%)</title><rect x="96.1" y="69" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="99.06" y="79.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (133 samples, 0.37%)</title><rect x="1140.9" y="133" width="4.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1143.88" y="143.5" ></text>
</g>
<g >
<title>baseline`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, Book::PriceAndSide&gt;&gt;&gt;::remove(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type (1,278 samples, 3.53%)</title><rect x="1028.9" y="149" width="41.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1031.86" y="159.5" >lob..</text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$malloc_type_malloc (16 samples, 0.04%)</title><rect x="471.2" y="133" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="474.22" y="143.5" ></text>
</g>
<g >
<title>baseline`Market::Apply (32,657 samples, 90.15%)</title><rect x="120.2" y="197" width="1063.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="123.23" y="207.5" >baseline`Market::Apply</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,504 samples, 4.15%)</title><rect x="230.4" y="117" width="49.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="233.36" y="127.5" >libs..</text>
</g>
<g >
<title>baseline`Book::Add (37 samples, 0.10%)</title><rect x="124.6" y="181" width="1.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="127.60" y="191.5" ></text>
</g>
<g >
<title>baseline`DYLD-STUB$$operator delete(void*) (53 samples, 0.15%)</title><rect x="1027.1" y="149" width="1.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1030.13" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1,477 samples, 4.08%)</title><rect x="231.2" y="101" width="48.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="234.24" y="111.5" >libs..</text>
</g>
<g >
<title>baseline`DYLD-STUB$$operator new(unsigned long) (55 samples, 0.15%)</title><rect x="401.4" y="149" width="1.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="404.44" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.02%)</title><rect x="280.2" y="101" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="283.17" y="111.5" ></text>
</g>
<g >
<title>libc++abi.dylib`DYLD-STUB$$free (68 samples, 0.19%)</title><rect x="813.3" y="149" width="2.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="816.31" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9,235 samples, 25.49%)</title><rect x="493.4" y="85" width="300.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="496.43" y="95.5" >libsystem_malloc.dylib`nanov2_find_block..</text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (97 samples, 0.27%)</title><rect x="821.7" y="149" width="3.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="824.65" y="159.5" ></text>
</g>
<g >
<title>baseline`dtbt::DbnDecoder::DecodeRecordCompat(unsigned char, dtbt::VersionUpgradePolicy, bool, std::__1::array (95 samples, 0.26%)</title><rect x="107.1" y="213" width="3.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="110.07" y="223.5" ></text>
</g>
<g >
<title>baseline`dtbt::DbnDecoder::DecodeRecord (2,810 samples, 7.76%)</title><rect x="15.5" y="213" width="91.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="18.54" y="223.5" >baseline`dat..</text>
</g>
<g >
<title>baseline`std::__1::__function::__func&lt;main::$_1, std::__1::allocator&lt;main::$_1&gt;, dtbt::KeepGoing (dtbt::Record const&amp;)&gt;::operator() (32,994 samples, 91.08%)</title><rect x="115.1" y="213" width="1074.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="118.12" y="223.5" >baseline`std::__1::__function::__func&lt;main::$_1, std::__1::allocator&lt;main::$_1&gt;, dtbt::KeepGoing (dtbt::Record const&amp;)&gt;::operator()</text>
</g>
<g >
<title>baseline`Book::Apply (31,774 samples, 87.71%)</title><rect x="125.8" y="181" width="1035.0" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="128.80" y="191.5" >baseline`Book::Apply</text>
</g>
<g >
<title>baseline`unsigned long std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::__erase_unique&lt;long long&gt; (1,195 samples, 3.30%)</title><rect x="1106.3" y="149" width="38.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1109.28" y="159.5" >lob..</text>
</g>
<g >
<title>baseline`Book::Add (18,035 samples, 49.79%)</title><rect x="214.4" y="165" width="587.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="217.40" y="175.5" >baseline`Book::Add</text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (1,761 samples, 4.86%)</title><rect x="223.6" y="149" width="57.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="226.59" y="159.5" >libc++..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.08%)</title><rect x="399.6" y="69" width="0.9" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="402.55" y="79.5" ></text>
</g>
<g >
<title>baseline`void std::__1::__tree_remove[abi:ne180100]&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (117 samples, 0.32%)</title><rect x="1145.2" y="149" width="3.8" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1148.21" y="159.5" ></text>
</g>
<g >
<title>baseline`Book::Apply (49 samples, 0.14%)</title><rect x="118.6" y="197" width="1.6" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="121.63" y="207.5" ></text>
</g>
<g >
<title>libc++abi.dylib`operator new(unsigned long) (1,002 samples, 2.77%)</title><rect x="368.1" y="133" width="32.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="371.09" y="143.5" >li..</text>
</g>
<g >
<title>baseline`std::__1::__tree&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::__map_value_compare&lt;long long, std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;, std::__1::less&lt;long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator&lt;dtbt::MboMsg&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long long, std::__1::vector&lt;dtbt::MboMsg, std::__1::allocator (5 samples, 0.01%)</title><rect x="1157.3" y="165" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1160.33" y="175.5" ></text>
</g>
<g >
<title>baseline`dtbt::InFileStream::ReadSome (2,417 samples, 6.67%)</title><rect x="28.3" y="181" width="78.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="31.34" y="191.5" >baseline`da..</text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.01%)</title><rect x="283.1" y="133" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="286.07" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc_type (9,853 samples, 27.20%)</title><rect x="474.3" y="117" width="321.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="477.31" y="127.5" >libsystem_malloc.dylib`nanov2_malloc_type</text>
</g>
<g >
<title>baseline`Book::GetOrInsertLevel (3,574 samples, 9.87%)</title><rect x="285.0" y="149" width="116.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="288.02" y="159.5" >baseline`Book::G..</text>
</g>
<g >
<title>baseline`dtbt::DbnDecoder::DecodeRecordCompat(unsigned char, dtbt::VersionUpgradePolicy, bool, std::__1::array (170 samples, 0.47%)</title><rect x="22.5" y="197" width="5.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="25.54" y="207.5" ></text>
</g>
</g>
</svg>
