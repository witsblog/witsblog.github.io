<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Vision | Wit's Blog</title><link>https://witsblog.github.io/tag/computer-vision/</link><atom:link href="https://witsblog.github.io/tag/computer-vision/index.xml" rel="self" type="application/rss+xml"/><description>Computer Vision</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><image><url>https://witsblog.github.io/media/icon_hu66cf44b0d2eab4dae9de00f68d847da7_1567_512x512_fill_lanczos_center_3.png</url><title>Computer Vision</title><link>https://witsblog.github.io/tag/computer-vision/</link></image><item><title>Accelerating Performance with CUDA!</title><link>https://witsblog.github.io/post/006_cuda_basic/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://witsblog.github.io/post/006_cuda_basic/</guid><description/></item><item><title>Custom Sonar Simulation in Gazebo</title><link>https://witsblog.github.io/post/004_sonar_sim/</link><pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate><guid>https://witsblog.github.io/post/004_sonar_sim/</guid><description/></item><item><title>Visual Odometry Implementation from Scratch</title><link>https://witsblog.github.io/post/001_visual_odometry/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://witsblog.github.io/post/001_visual_odometry/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This is the first-ever post of my blog; so I will give it a try. This post is about things that I went through when I tried to implement a simple monocular visual odometry from scratch. For a programming language, I choose MATLAB because it is easy-to-use and fast for prototyping a project.&lt;/p>
&lt;p>&lt;em>&lt;strong>Disclaimer:&lt;/strong>&lt;/em> This is not a state-of-the-art implementation. This simply serves the purpose of learning.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>To give a general idea, visual odometry (VO) is an algorithm that aims to recover the path incrementally, by using the visual input from cameras, and hence the name. It can be considered as a sequential structure from motion, as opposed to hierarchical structure from motion. Imagine a robot or an agent, attached with a calibrated camera $C$, moves through an environment and receives the image continuously. The images
$I_k, I_{k-1}$ are taken at different time steps
$k$ and
$k-1$, which corresponds to the camera pose
$C_k$ and $C_{k-1}$ respectively. The task of VO is basically to retrieve the transformation matrix
$$T = \left[R \lvert t \right]$$ that relates two camera poses, and concatenate all the transformaitons
$T_k$ to get the current camera pose:&lt;/p>
$$ C_{t} = T_{t,t-1}C_{t-1}$$
&lt;h2 id="getting-things-up--running">Getting Things Up &amp;amp; Running&lt;/h2>
&lt;p>I first have an initialization function &lt;code>vo_initialize.m&lt;/code> that takes two image frames, establishing keypoint correspondences between these two frames using KLT feature tracker, estimating relative camera pose, and finally triangulating an initial 3D point cloud landmarks. I admit that these may sound lacking of excitement (as they are something that is well understood in the computer vision community), but they are not easy to implement from scratch in a single sit.&lt;/p>
&lt;h3 id="feature-detection">Feature Detection&lt;/h3>
&lt;p>This is a simple plementation of Harris corner detector. For each pixel
$(u,v)$, we calculate a score&lt;/p>
$$R = det(A_{u,v}) - {\lambda}trace^2(A_{u,v})$$
&lt;p>where&lt;/p>
$$ A_{u,v} = \begin{bmatrix} \sum{I^2_{x}} &amp; \sum{I_{x}I_{y}}\\ \sum{I_{x}I_{y}} &amp; \sum{I^2_{y}} \end{bmatrix} $$
&lt;p>and
$I_x, I_y$ are the image gradients in
$x$ and
$y$ direction respectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conv2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#39;valid&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conv2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#39;valid&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_xx&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_x&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_yy&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_y&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_xy&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_x&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="n">I_y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_xx_sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conv2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_xx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">patch_size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#39;valid&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_yy_sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conv2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_yy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">patch_size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#39;valid&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">I_xy_sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conv2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_xy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">patch_size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#39;valid&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pad_size&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">floor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">patch_size&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">scores&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">I_xx_sum&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="n">I_yy_sum&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">I_xy_sum&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lambda&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">I_xx_sum&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">I_yy_sum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.^&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">scores&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">scores&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">padarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">pad_size&lt;/span> &lt;span class="n">pad_size&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After calculating the score, we simply select
$k$ keypoints with highest scores (with non-maximum suppression).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;span class="line">&lt;span class="cl">&lt;span class="n">scores_pad&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">padarray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">score_size&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores_pad&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">keypoints&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">zeros&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nb">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">k&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores_pad&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[],&lt;/span> &lt;span class="s">&amp;#39;all&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#39;linear&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">ind2sub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">score_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keypoints&lt;/span>&lt;span class="p">(:,&lt;/span> &lt;span class="nb">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scores_pad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="klt-feature-tracker">KLT Feature Tracker&lt;/h3>
&lt;p>&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pose-estimation">Pose Estimation&lt;/h3>
&lt;p>&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="triangulation">Triangulation&lt;/h3>
&lt;p>&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result of &lt;code>vo_initialize.m&lt;/code> seems reasonable. Good to go!&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://witsblog.github.io/images/post/001/post.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="problems-from-previous-implementation">Problems from Previous Implementation&lt;/h2>
&lt;p>&amp;hellip;&lt;/p>
&lt;h2 id="estimate-world-camera-pose">Estimate World Camera Pose&lt;/h2>
&lt;p>&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bundle-adjustment">Bundle Adjustment&lt;/h2>
&lt;p>Bundle adjustment is a very cool concept. To put it simply, it is an optimization algorithm used to refine the estimated trajectory.&lt;/p>
&lt;p>In this implementation, a &lt;em>motion-only&lt;/em> bundle adjustment is implemented, which optimizes only the camera orientation $R$ and position $t$. This implies that&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-matlab" data-lang="matlab">&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="results">Results&lt;/h2>
&lt;p>Putting it all together, the &lt;code>vo_initialize.m&lt;/code> function initializes the VO pipeline, creating initial 3D point landmarks, extracting initial keypoints, and estimating the initial pose of the camera. The &lt;code>vo_process.m&lt;/code> sequentially extracting and tracking image features from an image frame, across frames, and simultaneously estimating the pose of the camera. Bundle adjustment is also implemented to refine the estimated pose at each step. Lastly, new 3D points are regularly created as the number of currently tracked keypoints is shrinking over time. The following is the final result.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/A5HnnSiZ_LM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;br>
&lt;p>From the video, it is obvious that this is not a state-of-the-art implementation. There are various components that are not implemented. As we can see, the estimated trajectory starts to deviate from the ground truth after some time, due to the scale drift&amp;ndash;a common problem in monocular VO. The estimated trajetory also wiggles slightly, probaly due to the fact that the full bundle adjustment is not implemented. And the most importantly, I did not try to implement a loop closure.&lt;/p>
&lt;h2 id="reflections">Reflections&lt;/h2>
&lt;p>The task of implementing VO from scratch may sound lacking of excitement. I believe that the conventional pipeline of VO and SLAM is something that is already well-understood in the computer vision community. What I realize is that academic papers usually have missing steps that are left for the readers to figure out. Here, I tried to connect those steps and the result stands as a self-assesment of my understanding.&lt;/p></description></item></channel></rss>